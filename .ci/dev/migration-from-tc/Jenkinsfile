#!groovy

def DEFAULT_GRADLE_PARAMS = [
    '-Pcompilation.warningsAsErrors=false',
    '-Ptests.failFast=true',
]

@Library('existing-build-control')
import static com.r3.build.BuildControl.killAllExistingBuildsForJob

killAllExistingBuildsForJob(env.JOB_NAME, env.BUILD_NUMBER.toInteger())

pipeline {
    agent { label 'k8s' }
    options {
        timestamps()
        timeout(time: 3, unit: 'HOURS')
//        disableConcurrentBuilds() // this makes killAllExistingBuildsForJob always do nothing
        buildDiscarder(logRotator(daysToKeepStr: '7', artifactDaysToKeepStr: '7'))
    }

    environment {
        DOCKER_TAG_TO_USE = "${env.GIT_COMMIT.subSequence(0, 8)}"
        EXECUTOR_NUMBER = "${env.EXECUTOR_NUMBER}"
        BUILD_ID = "${env.BUILD_ID}-${env.JOB_NAME}"
        ARTIFACTORY_CREDENTIALS = credentials('artifactory-credentials')
    }

    stages {
        stage('Unit Tests') {
            steps {
                sh """
                    ./gradlew ${DEFAULT_GRADLE_PARAMS.join(' ')} --stacktrace \
                    -Dartifactory.username="${ARTIFACTORY_CREDENTIALS_USR}"   \
                    -Dartifactory.password="${ARTIFACTORY_CREDENTIALS_PSW}"   \
                    test
                """
            }
        }
    }

    post {
        always {
            archiveArtifacts artifacts: '**/build/libs/**/*.jar, **/build/distributions/**/*.tar, **/build/distributions/**/*.zip', fingerprint: true, onlyIfSuccessful: true
            junit '**/build/test-results/**/*.xml'
        }
        cleanup {
            deleteDir() /* clean up our workspace */
        }
    }
}
